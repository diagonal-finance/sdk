/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PackageDataStruct = {
    tokens: string[];
    state: BigNumberish;
    flowRates: BigNumberish[];
};

export type PackageDataStructOutput = [string[], number, BigNumber[]] & {
    tokens: string[];
    state: number;
    flowRates: BigNumber[];
};

export type PackageReturnTypeStruct = { id: BigNumberish; state: BigNumberish };

export type PackageReturnTypeStructOutput = [BigNumber, number] & {
    id: BigNumber;
    state: number;
};

export interface DiagonalServiceV1Interface extends utils.Interface {
    functions: {
        "DIAGONAL_REGISTRY()": FunctionFragment;
        "SUPERFLUID_HOST()": FunctionFragment;
        "activatePackage(uint256)": FunctionFragment;
        "activateService()": FunctionFragment;
        "addPackages((address[],uint8,int96[])[])": FunctionFragment;
        "addPrimaryTokens(address[])": FunctionFragment;
        "afterAgreementCreated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
        "afterAgreementTerminated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
        "afterAgreementUpdated(address,address,bytes32,bytes,bytes,bytes)": FunctionFragment;
        "beforeAgreementCreated(address,address,bytes32,bytes,bytes)": FunctionFragment;
        "beforeAgreementTerminated(address,address,bytes32,bytes,bytes)": FunctionFragment;
        "beforeAgreementUpdated(address,address,bytes32,bytes,bytes)": FunctionFragment;
        "diagonalServiceStorage()": FunctionFragment;
        "emergencyCloseSubscription(address,address)": FunctionFragment;
        "emergencyDrain(address)": FunctionFragment;
        "getPaymentTerms(uint256,address)": FunctionFragment;
        "getSubscriberState(address,address)": FunctionFragment;
        "initialize(uint256,address)": FunctionFragment;
        "initializeService(address[])": FunctionFragment;
        "owner()": FunctionFragment;
        "ownerFlowRates(address)": FunctionFragment;
        "packageIds()": FunctionFragment;
        "packages(uint256)": FunctionFragment;
        "primaryAcceptedTokenList(uint256)": FunctionFragment;
        "primaryTokens(address)": FunctionFragment;
        "recoverStreams(address,address[])": FunctionFragment;
        "serviceId()": FunctionFragment;
        "state()": FunctionFragment;
        "stopPackage(uint256)": FunctionFragment;
        "stopService()": FunctionFragment;
        "subscriptionPaymentTermsValid(uint256,address,int96)": FunctionFragment;
        "transferServiceOwnership(address)": FunctionFragment;
        "treasuryFeeRates(address)": FunctionFragment;
    };

    encodeFunctionData(
        functionFragment: "DIAGONAL_REGISTRY",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "SUPERFLUID_HOST",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "activatePackage",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "activateService",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "addPackages",
        values: [PackageDataStruct[]]
    ): string;
    encodeFunctionData(
        functionFragment: "addPrimaryTokens",
        values: [string[]]
    ): string;
    encodeFunctionData(
        functionFragment: "afterAgreementCreated",
        values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "afterAgreementTerminated",
        values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "afterAgreementUpdated",
        values: [string, string, BytesLike, BytesLike, BytesLike, BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "beforeAgreementCreated",
        values: [string, string, BytesLike, BytesLike, BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "beforeAgreementTerminated",
        values: [string, string, BytesLike, BytesLike, BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "beforeAgreementUpdated",
        values: [string, string, BytesLike, BytesLike, BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: "diagonalServiceStorage",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "emergencyCloseSubscription",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "emergencyDrain",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "getPaymentTerms",
        values: [BigNumberish, string]
    ): string;
    encodeFunctionData(
        functionFragment: "getSubscriberState",
        values: [string, string]
    ): string;
    encodeFunctionData(
        functionFragment: "initialize",
        values: [BigNumberish, string]
    ): string;
    encodeFunctionData(
        functionFragment: "initializeService",
        values: [string[]]
    ): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "ownerFlowRates",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "packageIds",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "packages",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "primaryAcceptedTokenList",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "primaryTokens",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "recoverStreams",
        values: [string, string[]]
    ): string;
    encodeFunctionData(
        functionFragment: "serviceId",
        values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "state", values?: undefined): string;
    encodeFunctionData(
        functionFragment: "stopPackage",
        values: [BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "stopService",
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: "subscriptionPaymentTermsValid",
        values: [BigNumberish, string, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: "transferServiceOwnership",
        values: [string]
    ): string;
    encodeFunctionData(
        functionFragment: "treasuryFeeRates",
        values: [string]
    ): string;

    decodeFunctionResult(
        functionFragment: "DIAGONAL_REGISTRY",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "SUPERFLUID_HOST",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "activatePackage",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "activateService",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "addPackages",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "addPrimaryTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "afterAgreementCreated",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "afterAgreementTerminated",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "afterAgreementUpdated",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "beforeAgreementCreated",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "beforeAgreementTerminated",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "beforeAgreementUpdated",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "diagonalServiceStorage",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "emergencyCloseSubscription",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "emergencyDrain",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getPaymentTerms",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "getSubscriberState",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "initialize",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "initializeService",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "ownerFlowRates",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "packageIds",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "packages", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "primaryAcceptedTokenList",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "primaryTokens",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "recoverStreams",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "serviceId",
        data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
    decodeFunctionResult(
        functionFragment: "stopPackage",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "stopService",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "subscriptionPaymentTermsValid",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "transferServiceOwnership",
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: "treasuryFeeRates",
        data: BytesLike
    ): Result;

    events: {
        "EmergencyCloseSubscription(address,address)": EventFragment;
        "EmergencyDrain(address)": EventFragment;
        "PackageActivated(uint256)": EventFragment;
        "PackageAdded(uint256,uint256)": EventFragment;
        "PackageStopped(uint256)": EventFragment;
        "PrimaryTokenAdded(address)": EventFragment;
        "ServiceActivated()": EventFragment;
        "ServiceOwnershipUpdated(address,address)": EventFragment;
        "ServiceStopped()": EventFragment;
        "StreamRecovered(address,address,address)": EventFragment;
        "SubscriptionStarted(address,uint256,address,int96,int96)": EventFragment;
        "SubscriptionStopped(address,uint256,address)": EventFragment;
        "SubscriptionTerminated(address,address)": EventFragment;
    };

    getEvent(
        nameOrSignatureOrTopic: "EmergencyCloseSubscription"
    ): EventFragment;
    getEvent(nameOrSignatureOrTopic: "EmergencyDrain"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PackageActivated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PackageAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PackageStopped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PrimaryTokenAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ServiceActivated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ServiceOwnershipUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ServiceStopped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StreamRecovered"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionStarted"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionStopped"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "SubscriptionTerminated"): EventFragment;
}

export type EmergencyCloseSubscriptionEvent = TypedEvent<
    [string, string],
    { user: string; superToken: string }
>;

export type EmergencyCloseSubscriptionEventFilter =
    TypedEventFilter<EmergencyCloseSubscriptionEvent>;

export type EmergencyDrainEvent = TypedEvent<[string], { superToken: string }>;

export type EmergencyDrainEventFilter = TypedEventFilter<EmergencyDrainEvent>;

export type PackageActivatedEvent = TypedEvent<
    [BigNumber],
    { packageId: BigNumber }
>;

export type PackageActivatedEventFilter =
    TypedEventFilter<PackageActivatedEvent>;

export type PackageAddedEvent = TypedEvent<
    [BigNumber, BigNumber],
    { packageId: BigNumber; numPaymentTerms: BigNumber }
>;

export type PackageAddedEventFilter = TypedEventFilter<PackageAddedEvent>;

export type PackageStoppedEvent = TypedEvent<
    [BigNumber],
    { packageId: BigNumber }
>;

export type PackageStoppedEventFilter = TypedEventFilter<PackageStoppedEvent>;

export type PrimaryTokenAddedEvent = TypedEvent<
    [string],
    { superToken: string }
>;

export type PrimaryTokenAddedEventFilter =
    TypedEventFilter<PrimaryTokenAddedEvent>;

export type ServiceActivatedEvent = TypedEvent<[], {}>;

export type ServiceActivatedEventFilter =
    TypedEventFilter<ServiceActivatedEvent>;

export type ServiceOwnershipUpdatedEvent = TypedEvent<
    [string, string],
    { oldOwner: string; newOwner: string }
>;

export type ServiceOwnershipUpdatedEventFilter =
    TypedEventFilter<ServiceOwnershipUpdatedEvent>;

export type ServiceStoppedEvent = TypedEvent<[], {}>;

export type ServiceStoppedEventFilter = TypedEventFilter<ServiceStoppedEvent>;

export type StreamRecoveredEvent = TypedEvent<
    [string, string, string],
    { prevOwner: string; owner: string; superToken: string }
>;

export type StreamRecoveredEventFilter = TypedEventFilter<StreamRecoveredEvent>;

export type SubscriptionStartedEvent = TypedEvent<
    [string, BigNumber, string, BigNumber, BigNumber],
    {
        subscriber: string;
        packageId: BigNumber;
        superToken: string;
        flowRate: BigNumber;
        feeRate: BigNumber;
    }
>;

export type SubscriptionStartedEventFilter =
    TypedEventFilter<SubscriptionStartedEvent>;

export type SubscriptionStoppedEvent = TypedEvent<
    [string, BigNumber, string],
    { subscriber: string; packageId: BigNumber; superToken: string }
>;

export type SubscriptionStoppedEventFilter =
    TypedEventFilter<SubscriptionStoppedEvent>;

export type SubscriptionTerminatedEvent = TypedEvent<
    [string, string],
    { subscriber: string; superToken: string }
>;

export type SubscriptionTerminatedEventFilter =
    TypedEventFilter<SubscriptionTerminatedEvent>;

export interface DiagonalServiceV1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;

    interface: DiagonalServiceV1Interface;

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;

    functions: {
        DIAGONAL_REGISTRY(overrides?: CallOverrides): Promise<[string]>;

        SUPERFLUID_HOST(overrides?: CallOverrides): Promise<[string]>;

        activatePackage(
            id: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        activateService(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        addPackages(
            packagesData: PackageDataStruct[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        addPrimaryTokens(
            superTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        afterAgreementCreated(
            superToken: string,
            agreementClass: string,
            agreementId: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        afterAgreementTerminated(
            superToken: string,
            arg1: string,
            arg2: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        afterAgreementUpdated(
            superToken: string,
            agreementClass: string,
            agreementId: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        beforeAgreementCreated(
            superToken: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<[string] & { cbdata: string }>;

        beforeAgreementTerminated(
            arg0: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            arg4: BytesLike,
            overrides?: CallOverrides
        ): Promise<[string] & { cbdata: string }>;

        beforeAgreementUpdated(
            superToken: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<[string] & { cbdata: string }>;

        diagonalServiceStorage(overrides?: CallOverrides): Promise<
            [string, number, BigNumber, BigNumber] & {
                owner: string;
                state: number;
                serviceId: BigNumber;
                packageIds: BigNumber;
            }
        >;

        emergencyCloseSubscription(
            user: string,
            superToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        emergencyDrain(
            superToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        getPaymentTerms(
            packageId: BigNumberish,
            token: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { paymentTerms: BigNumber }>;

        getSubscriberState(
            subscriber: string,
            superToken: string,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber[], boolean] & {
                totalInputFlowRate: BigNumber;
                totalInputFeeRate: BigNumber;
                numSubscriptions: BigNumber;
                subscriberPackageIds: BigNumber[];
                terminated: boolean;
            }
        >;

        initialize(
            _serviceId: BigNumberish,
            _owner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "initializeService(address[])"(
            _primaryTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        "initializeService(address[],(address[],uint8,int96[]))"(
            _primaryTokens: string[],
            defaultPackage: PackageDataStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        owner(overrides?: CallOverrides): Promise<[string]>;

        ownerFlowRates(
            token: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;

        packageIds(overrides?: CallOverrides): Promise<[BigNumber]>;

        packages(
            packageId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[PackageReturnTypeStructOutput]>;

        primaryAcceptedTokenList(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[string]>;

        primaryTokens(
            token: string,
            overrides?: CallOverrides
        ): Promise<[boolean]>;

        recoverStreams(
            prevOwner: string,
            superTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        serviceId(overrides?: CallOverrides): Promise<[BigNumber]>;

        state(overrides?: CallOverrides): Promise<[number]>;

        stopPackage(
            id: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        stopService(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        subscriptionPaymentTermsValid(
            packageId: BigNumberish,
            token: string,
            flowRate: BigNumberish,
            overrides?: CallOverrides
        ): Promise<[boolean] & { valid: boolean }>;

        transferServiceOwnership(
            to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<ContractTransaction>;

        treasuryFeeRates(
            token: string,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>;
    };

    DIAGONAL_REGISTRY(overrides?: CallOverrides): Promise<string>;

    SUPERFLUID_HOST(overrides?: CallOverrides): Promise<string>;

    activatePackage(
        id: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    activateService(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPackages(
        packagesData: PackageDataStruct[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPrimaryTokens(
        superTokens: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementCreated(
        superToken: string,
        agreementClass: string,
        agreementId: BytesLike,
        agreementData: BytesLike,
        cbdata: BytesLike,
        ctx: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementTerminated(
        superToken: string,
        arg1: string,
        arg2: BytesLike,
        agreementData: BytesLike,
        cbdata: BytesLike,
        ctx: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    afterAgreementUpdated(
        superToken: string,
        agreementClass: string,
        agreementId: BytesLike,
        agreementData: BytesLike,
        cbdata: BytesLike,
        ctx: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beforeAgreementCreated(
        superToken: string,
        agreementClass: string,
        arg2: BytesLike,
        arg3: BytesLike,
        ctx: BytesLike,
        overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementTerminated(
        arg0: string,
        agreementClass: string,
        arg2: BytesLike,
        arg3: BytesLike,
        arg4: BytesLike,
        overrides?: CallOverrides
    ): Promise<string>;

    beforeAgreementUpdated(
        superToken: string,
        agreementClass: string,
        arg2: BytesLike,
        arg3: BytesLike,
        ctx: BytesLike,
        overrides?: CallOverrides
    ): Promise<string>;

    diagonalServiceStorage(overrides?: CallOverrides): Promise<
        [string, number, BigNumber, BigNumber] & {
            owner: string;
            state: number;
            serviceId: BigNumber;
            packageIds: BigNumber;
        }
    >;

    emergencyCloseSubscription(
        user: string,
        superToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyDrain(
        superToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPaymentTerms(
        packageId: BigNumberish,
        token: string,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriberState(
        subscriber: string,
        superToken: string,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber[], boolean] & {
            totalInputFlowRate: BigNumber;
            totalInputFeeRate: BigNumber;
            numSubscriptions: BigNumber;
            subscriberPackageIds: BigNumber[];
            terminated: boolean;
        }
    >;

    initialize(
        _serviceId: BigNumberish,
        _owner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initializeService(address[])"(
        _primaryTokens: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initializeService(address[],(address[],uint8,int96[]))"(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerFlowRates(
        token: string,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    packageIds(overrides?: CallOverrides): Promise<BigNumber>;

    packages(
        packageId: BigNumberish,
        overrides?: CallOverrides
    ): Promise<PackageReturnTypeStructOutput>;

    primaryAcceptedTokenList(
        index: BigNumberish,
        overrides?: CallOverrides
    ): Promise<string>;

    primaryTokens(token: string, overrides?: CallOverrides): Promise<boolean>;

    recoverStreams(
        prevOwner: string,
        superTokens: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    serviceId(overrides?: CallOverrides): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<number>;

    stopPackage(
        id: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopService(
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriptionPaymentTermsValid(
        packageId: BigNumberish,
        token: string,
        flowRate: BigNumberish,
        overrides?: CallOverrides
    ): Promise<boolean>;

    transferServiceOwnership(
        to: string,
        overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryFeeRates(
        token: string,
        overrides?: CallOverrides
    ): Promise<BigNumber>;

    callStatic: {
        DIAGONAL_REGISTRY(overrides?: CallOverrides): Promise<string>;

        SUPERFLUID_HOST(overrides?: CallOverrides): Promise<string>;

        activatePackage(
            id: BigNumberish,
            overrides?: CallOverrides
        ): Promise<void>;

        activateService(overrides?: CallOverrides): Promise<void>;

        addPackages(
            packagesData: PackageDataStruct[],
            overrides?: CallOverrides
        ): Promise<void>;

        addPrimaryTokens(
            superTokens: string[],
            overrides?: CallOverrides
        ): Promise<void>;

        afterAgreementCreated(
            superToken: string,
            agreementClass: string,
            agreementId: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        afterAgreementTerminated(
            superToken: string,
            arg1: string,
            arg2: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        afterAgreementUpdated(
            superToken: string,
            agreementClass: string,
            agreementId: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        beforeAgreementCreated(
            superToken: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        beforeAgreementTerminated(
            arg0: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            arg4: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        beforeAgreementUpdated(
            superToken: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<string>;

        diagonalServiceStorage(overrides?: CallOverrides): Promise<
            [string, number, BigNumber, BigNumber] & {
                owner: string;
                state: number;
                serviceId: BigNumber;
                packageIds: BigNumber;
            }
        >;

        emergencyCloseSubscription(
            user: string,
            superToken: string,
            overrides?: CallOverrides
        ): Promise<void>;

        emergencyDrain(
            superToken: string,
            overrides?: CallOverrides
        ): Promise<void>;

        getPaymentTerms(
            packageId: BigNumberish,
            token: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getSubscriberState(
            subscriber: string,
            superToken: string,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber[], boolean] & {
                totalInputFlowRate: BigNumber;
                totalInputFeeRate: BigNumber;
                numSubscriptions: BigNumber;
                subscriberPackageIds: BigNumber[];
                terminated: boolean;
            }
        >;

        initialize(
            _serviceId: BigNumberish,
            _owner: string,
            overrides?: CallOverrides
        ): Promise<void>;

        "initializeService(address[])"(
            _primaryTokens: string[],
            overrides?: CallOverrides
        ): Promise<void>;

        "initializeService(address[],(address[],uint8,int96[]))"(
            _primaryTokens: string[],
            defaultPackage: PackageDataStruct,
            overrides?: CallOverrides
        ): Promise<void>;

        owner(overrides?: CallOverrides): Promise<string>;

        ownerFlowRates(
            token: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        packageIds(overrides?: CallOverrides): Promise<BigNumber>;

        packages(
            packageId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PackageReturnTypeStructOutput>;

        primaryAcceptedTokenList(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<string>;

        primaryTokens(
            token: string,
            overrides?: CallOverrides
        ): Promise<boolean>;

        recoverStreams(
            prevOwner: string,
            superTokens: string[],
            overrides?: CallOverrides
        ): Promise<void>;

        serviceId(overrides?: CallOverrides): Promise<BigNumber>;

        state(overrides?: CallOverrides): Promise<number>;

        stopPackage(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

        stopService(overrides?: CallOverrides): Promise<void>;

        subscriptionPaymentTermsValid(
            packageId: BigNumberish,
            token: string,
            flowRate: BigNumberish,
            overrides?: CallOverrides
        ): Promise<boolean>;

        transferServiceOwnership(
            to: string,
            overrides?: CallOverrides
        ): Promise<void>;

        treasuryFeeRates(
            token: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    filters: {
        "EmergencyCloseSubscription(address,address)"(
            user?: string | null,
            superToken?: string | null
        ): EmergencyCloseSubscriptionEventFilter;
        EmergencyCloseSubscription(
            user?: string | null,
            superToken?: string | null
        ): EmergencyCloseSubscriptionEventFilter;

        "EmergencyDrain(address)"(
            superToken?: string | null
        ): EmergencyDrainEventFilter;
        EmergencyDrain(superToken?: string | null): EmergencyDrainEventFilter;

        "PackageActivated(uint256)"(
            packageId?: BigNumberish | null
        ): PackageActivatedEventFilter;
        PackageActivated(
            packageId?: BigNumberish | null
        ): PackageActivatedEventFilter;

        "PackageAdded(uint256,uint256)"(
            packageId?: BigNumberish | null,
            numPaymentTerms?: BigNumberish | null
        ): PackageAddedEventFilter;
        PackageAdded(
            packageId?: BigNumberish | null,
            numPaymentTerms?: BigNumberish | null
        ): PackageAddedEventFilter;

        "PackageStopped(uint256)"(
            packageId?: BigNumberish | null
        ): PackageStoppedEventFilter;
        PackageStopped(
            packageId?: BigNumberish | null
        ): PackageStoppedEventFilter;

        "PrimaryTokenAdded(address)"(
            superToken?: string | null
        ): PrimaryTokenAddedEventFilter;
        PrimaryTokenAdded(
            superToken?: string | null
        ): PrimaryTokenAddedEventFilter;

        "ServiceActivated()"(): ServiceActivatedEventFilter;
        ServiceActivated(): ServiceActivatedEventFilter;

        "ServiceOwnershipUpdated(address,address)"(
            oldOwner?: string | null,
            newOwner?: string | null
        ): ServiceOwnershipUpdatedEventFilter;
        ServiceOwnershipUpdated(
            oldOwner?: string | null,
            newOwner?: string | null
        ): ServiceOwnershipUpdatedEventFilter;

        "ServiceStopped()"(): ServiceStoppedEventFilter;
        ServiceStopped(): ServiceStoppedEventFilter;

        "StreamRecovered(address,address,address)"(
            prevOwner?: string | null,
            owner?: string | null,
            superToken?: string | null
        ): StreamRecoveredEventFilter;
        StreamRecovered(
            prevOwner?: string | null,
            owner?: string | null,
            superToken?: string | null
        ): StreamRecoveredEventFilter;

        "SubscriptionStarted(address,uint256,address,int96,int96)"(
            subscriber?: string | null,
            packageId?: BigNumberish | null,
            superToken?: string | null,
            flowRate?: null,
            feeRate?: null
        ): SubscriptionStartedEventFilter;
        SubscriptionStarted(
            subscriber?: string | null,
            packageId?: BigNumberish | null,
            superToken?: string | null,
            flowRate?: null,
            feeRate?: null
        ): SubscriptionStartedEventFilter;

        "SubscriptionStopped(address,uint256,address)"(
            subscriber?: string | null,
            packageId?: BigNumberish | null,
            superToken?: string | null
        ): SubscriptionStoppedEventFilter;
        SubscriptionStopped(
            subscriber?: string | null,
            packageId?: BigNumberish | null,
            superToken?: string | null
        ): SubscriptionStoppedEventFilter;

        "SubscriptionTerminated(address,address)"(
            subscriber?: string | null,
            superToken?: string | null
        ): SubscriptionTerminatedEventFilter;
        SubscriptionTerminated(
            subscriber?: string | null,
            superToken?: string | null
        ): SubscriptionTerminatedEventFilter;
    };

    estimateGas: {
        DIAGONAL_REGISTRY(overrides?: CallOverrides): Promise<BigNumber>;

        SUPERFLUID_HOST(overrides?: CallOverrides): Promise<BigNumber>;

        activatePackage(
            id: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        activateService(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        addPackages(
            packagesData: PackageDataStruct[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        addPrimaryTokens(
            superTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        afterAgreementCreated(
            superToken: string,
            agreementClass: string,
            agreementId: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        afterAgreementTerminated(
            superToken: string,
            arg1: string,
            arg2: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        afterAgreementUpdated(
            superToken: string,
            agreementClass: string,
            agreementId: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        beforeAgreementCreated(
            superToken: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        beforeAgreementTerminated(
            arg0: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            arg4: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        beforeAgreementUpdated(
            superToken: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        diagonalServiceStorage(overrides?: CallOverrides): Promise<BigNumber>;

        emergencyCloseSubscription(
            user: string,
            superToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        emergencyDrain(
            superToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        getPaymentTerms(
            packageId: BigNumberish,
            token: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        getSubscriberState(
            subscriber: string,
            superToken: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        initialize(
            _serviceId: BigNumberish,
            _owner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "initializeService(address[])"(
            _primaryTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        "initializeService(address[],(address[],uint8,int96[]))"(
            _primaryTokens: string[],
            defaultPackage: PackageDataStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        owner(overrides?: CallOverrides): Promise<BigNumber>;

        ownerFlowRates(
            token: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        packageIds(overrides?: CallOverrides): Promise<BigNumber>;

        packages(
            packageId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        primaryAcceptedTokenList(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        primaryTokens(
            token: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        recoverStreams(
            prevOwner: string,
            superTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        serviceId(overrides?: CallOverrides): Promise<BigNumber>;

        state(overrides?: CallOverrides): Promise<BigNumber>;

        stopPackage(
            id: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        stopService(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        subscriptionPaymentTermsValid(
            packageId: BigNumberish,
            token: string,
            flowRate: BigNumberish,
            overrides?: CallOverrides
        ): Promise<BigNumber>;

        transferServiceOwnership(
            to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<BigNumber>;

        treasuryFeeRates(
            token: string,
            overrides?: CallOverrides
        ): Promise<BigNumber>;
    };

    populateTransaction: {
        DIAGONAL_REGISTRY(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        SUPERFLUID_HOST(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        activatePackage(
            id: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        activateService(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        addPackages(
            packagesData: PackageDataStruct[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        addPrimaryTokens(
            superTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        afterAgreementCreated(
            superToken: string,
            agreementClass: string,
            agreementId: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        afterAgreementTerminated(
            superToken: string,
            arg1: string,
            arg2: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        afterAgreementUpdated(
            superToken: string,
            agreementClass: string,
            agreementId: BytesLike,
            agreementData: BytesLike,
            cbdata: BytesLike,
            ctx: BytesLike,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        beforeAgreementCreated(
            superToken: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        beforeAgreementTerminated(
            arg0: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            arg4: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        beforeAgreementUpdated(
            superToken: string,
            agreementClass: string,
            arg2: BytesLike,
            arg3: BytesLike,
            ctx: BytesLike,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        diagonalServiceStorage(
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        emergencyCloseSubscription(
            user: string,
            superToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        emergencyDrain(
            superToken: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        getPaymentTerms(
            packageId: BigNumberish,
            token: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        getSubscriberState(
            subscriber: string,
            superToken: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        initialize(
            _serviceId: BigNumberish,
            _owner: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "initializeService(address[])"(
            _primaryTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        "initializeService(address[],(address[],uint8,int96[]))"(
            _primaryTokens: string[],
            defaultPackage: PackageDataStruct,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        ownerFlowRates(
            token: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        packageIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        packages(
            packageId: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        primaryAcceptedTokenList(
            index: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        primaryTokens(
            token: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        recoverStreams(
            prevOwner: string,
            superTokens: string[],
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        serviceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

        stopPackage(
            id: BigNumberish,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        stopService(
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        subscriptionPaymentTermsValid(
            packageId: BigNumberish,
            token: string,
            flowRate: BigNumberish,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;

        transferServiceOwnership(
            to: string,
            overrides?: Overrides & { from?: string | Promise<string> }
        ): Promise<PopulatedTransaction>;

        treasuryFeeRates(
            token: string,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>;
    };
}
