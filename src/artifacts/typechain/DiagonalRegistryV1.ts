/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
  } from "ethers";
  import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
  import { Listener, Provider } from "@ethersproject/providers";
  import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
  
  export type PackageDataStruct = {
    tokens: string[];
    state: BigNumberish;
    flowRates: BigNumberish[];
  };
  
  export type PackageDataStructOutput = [string[], number, BigNumber[]] & {
    tokens: string[];
    state: number;
    flowRates: BigNumber[];
  };
  
  export type SaltParamsStruct = {
    chainServiceId: BigNumberish;
    chainId: BigNumberish;
  };
  
  export type SaltParamsStructOutput = [BigNumber, BigNumber] & {
    chainServiceId: BigNumber;
    chainId: BigNumber;
  };
  
  export interface DiagonalRegistryV1Interface extends utils.Interface {
    functions: {
      "SUPERFLUID_HOST()": FunctionFragment;
      "acceptedTokens(address)": FunctionFragment;
      "addAcceptedSuperToken(address)": FunctionFragment;
      "approve(address,uint256)": FunctionFragment;
      "balanceOf(address)": FunctionFragment;
      "createService(address[])": FunctionFragment;
      "createServiceWithSalt(address[],(address[],uint8,int96[]),(uint256,uint256))": FunctionFragment;
      "deployer()": FunctionFragment;
      "getApproved(uint256)": FunctionFragment;
      "initialize(address,address,address[],address)": FunctionFragment;
      "isApprovedForAll(address,address)": FunctionFragment;
      "name()": FunctionFragment;
      "owner()": FunctionFragment;
      "ownerOf(uint256)": FunctionFragment;
      "pause()": FunctionFragment;
      "paused()": FunctionFragment;
      "protocolFees(address)": FunctionFragment;
      "removeAcceptedSuperToken(address)": FunctionFragment;
      "renounceOwnership()": FunctionFragment;
      "safeTransferFrom(address,address,uint256)": FunctionFragment;
      "serviceBeacon()": FunctionFragment;
      "serviceIdToAddress(uint256)": FunctionFragment;
      "serviceIds()": FunctionFragment;
      "setApprovalForAll(address,bool)": FunctionFragment;
      "setServiceBeacon(address)": FunctionFragment;
      "supportsInterface(bytes4)": FunctionFragment;
      "symbol()": FunctionFragment;
      "tokenURI(uint256)": FunctionFragment;
      "transferFrom(address,address,uint256)": FunctionFragment;
      "transferOwnership(address)": FunctionFragment;
      "treasury()": FunctionFragment;
      "unpause()": FunctionFragment;
      "updateProtocolFee(address,int96)": FunctionFragment;
      "updateTreasury(address)": FunctionFragment;
      "upgradeTo(address)": FunctionFragment;
      "upgradeToAndCall(address,bytes)": FunctionFragment;
    };
  
    encodeFunctionData(
      functionFragment: "SUPERFLUID_HOST",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "acceptedTokens",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "addAcceptedSuperToken",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "approve",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
    encodeFunctionData(
      functionFragment: "createService",
      values: [string[]]
    ): string;
    encodeFunctionData(
      functionFragment: "createServiceWithSalt",
      values: [string[], PackageDataStruct, SaltParamsStruct]
    ): string;
    encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "getApproved",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "initialize",
      values: [string, string, string[], string]
    ): string;
    encodeFunctionData(
      functionFragment: "isApprovedForAll",
      values: [string, string]
    ): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "ownerOf",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(functionFragment: "pause", values?: undefined): string;
    encodeFunctionData(functionFragment: "paused", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "protocolFees",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "removeAcceptedSuperToken",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "renounceOwnership",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "safeTransferFrom",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "serviceBeacon",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "serviceIdToAddress",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "serviceIds",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "setApprovalForAll",
      values: [string, boolean]
    ): string;
    encodeFunctionData(
      functionFragment: "setServiceBeacon",
      values: [string]
    ): string;
    encodeFunctionData(
      functionFragment: "supportsInterface",
      values: [BytesLike]
    ): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "tokenURI",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "transferFrom",
      values: [string, string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "transferOwnership",
      values: [string]
    ): string;
    encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
    encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "updateProtocolFee",
      values: [string, BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "updateTreasury",
      values: [string]
    ): string;
    encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
    encodeFunctionData(
      functionFragment: "upgradeToAndCall",
      values: [string, BytesLike]
    ): string;
  
    decodeFunctionResult(
      functionFragment: "SUPERFLUID_HOST",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "acceptedTokens",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "addAcceptedSuperToken",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "createService",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "createServiceWithSalt",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "getApproved",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "isApprovedForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "protocolFees",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "removeAcceptedSuperToken",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "renounceOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "safeTransferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "serviceBeacon",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "serviceIdToAddress",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "serviceIds", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "setApprovalForAll",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "setServiceBeacon",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "supportsInterface",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "transferFrom",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "transferOwnership",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "updateProtocolFee",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "updateTreasury",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "upgradeToAndCall",
      data: BytesLike
    ): Result;
  
    events: {
      "AcceptedSuperTokenAdded(address)": EventFragment;
      "AcceptedSuperTokenRemoved(address)": EventFragment;
      "AdminChanged(address,address)": EventFragment;
      "Approval(address,address,uint256)": EventFragment;
      "ApprovalForAll(address,address,bool)": EventFragment;
      "BeaconUpgraded(address)": EventFragment;
      "DiagonalServiceBeaconSet(address)": EventFragment;
      "OwnershipTransferred(address,address)": EventFragment;
      "Paused(address)": EventFragment;
      "ProtocolFeePercentUpdated(address,int96)": EventFragment;
      "ServiceCreated(uint256,address,address,uint256)": EventFragment;
      "Transfer(address,address,uint256)": EventFragment;
      "TreasuryUpdated(address)": EventFragment;
      "Unpaused(address)": EventFragment;
      "Upgraded(address)": EventFragment;
    };
  
    getEvent(nameOrSignatureOrTopic: "AcceptedSuperTokenAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AcceptedSuperTokenRemoved"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "DiagonalServiceBeaconSet"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ProtocolFeePercentUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ServiceCreated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TreasuryUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  }
  
  export type AcceptedSuperTokenAddedEvent = TypedEvent<
    [string],
    { superToken: string }
  >;
  
  export type AcceptedSuperTokenAddedEventFilter =
    TypedEventFilter<AcceptedSuperTokenAddedEvent>;
  
  export type AcceptedSuperTokenRemovedEvent = TypedEvent<
    [string],
    { superToken: string }
  >;
  
  export type AcceptedSuperTokenRemovedEventFilter =
    TypedEventFilter<AcceptedSuperTokenRemovedEvent>;
  
  export type AdminChangedEvent = TypedEvent<
    [string, string],
    { previousAdmin: string; newAdmin: string }
  >;
  
  export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;
  
  export type ApprovalEvent = TypedEvent<
    [string, string, BigNumber],
    { owner: string; approved: string; tokenId: BigNumber }
  >;
  
  export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;
  
  export type ApprovalForAllEvent = TypedEvent<
    [string, string, boolean],
    { owner: string; operator: string; approved: boolean }
  >;
  
  export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;
  
  export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;
  
  export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;
  
  export type DiagonalServiceBeaconSetEvent = TypedEvent<
    [string],
    { diagonalServiceBeacon: string }
  >;
  
  export type DiagonalServiceBeaconSetEventFilter =
    TypedEventFilter<DiagonalServiceBeaconSetEvent>;
  
  export type OwnershipTransferredEvent = TypedEvent<
    [string, string],
    { previousOwner: string; newOwner: string }
  >;
  
  export type OwnershipTransferredEventFilter =
    TypedEventFilter<OwnershipTransferredEvent>;
  
  export type PausedEvent = TypedEvent<[string], { account: string }>;
  
  export type PausedEventFilter = TypedEventFilter<PausedEvent>;
  
  export type ProtocolFeePercentUpdatedEvent = TypedEvent<
    [string, BigNumber],
    { superToken: string; protocolFeePercent: BigNumber }
  >;
  
  export type ProtocolFeePercentUpdatedEventFilter =
    TypedEventFilter<ProtocolFeePercentUpdatedEvent>;
  
  export type ServiceCreatedEvent = TypedEvent<
    [BigNumber, string, string, BigNumber],
    {
      serviceId: BigNumber;
      serviceAddress: string;
      provider: string;
      salt: BigNumber;
    }
  >;
  
  export type ServiceCreatedEventFilter = TypedEventFilter<ServiceCreatedEvent>;
  
  export type TransferEvent = TypedEvent<
    [string, string, BigNumber],
    { from: string; to: string; tokenId: BigNumber }
  >;
  
  export type TransferEventFilter = TypedEventFilter<TransferEvent>;
  
  export type TreasuryUpdatedEvent = TypedEvent<
    [string],
    { newTreasury: string }
  >;
  
  export type TreasuryUpdatedEventFilter = TypedEventFilter<TreasuryUpdatedEvent>;
  
  export type UnpausedEvent = TypedEvent<[string], { account: string }>;
  
  export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;
  
  export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;
  
  export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;
  
  export interface DiagonalRegistryV1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
  
    interface: DiagonalRegistryV1Interface;
  
    queryFilter<TEvent extends TypedEvent>(
      event: TypedEventFilter<TEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>;
  
    listeners<TEvent extends TypedEvent>(
      eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(
      eventFilter: TypedEventFilter<TEvent>
    ): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
  
    functions: {
      SUPERFLUID_HOST(overrides?: CallOverrides): Promise<[string]>;
  
      acceptedTokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  
      addAcceptedSuperToken(
        superToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  
      "createService(address[])"(
        _primaryTokens: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "createService(address[],(address[],uint8,int96[]))"(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      createServiceWithSalt(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        saltParams: SaltParamsStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      deployer(overrides?: CallOverrides): Promise<[string]>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      initialize(
        _treasury: string,
        _deployer: string,
        _acceptedTokens: string[],
        _owner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      name(overrides?: CallOverrides): Promise<[string]>;
  
      owner(overrides?: CallOverrides): Promise<[string]>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      pause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      paused(overrides?: CallOverrides): Promise<[boolean]>;
  
      protocolFees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  
      removeAcceptedSuperToken(
        superToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      serviceBeacon(overrides?: CallOverrides): Promise<[string]>;
  
      serviceIdToAddress(
        arg0: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      serviceIds(overrides?: CallOverrides): Promise<[BigNumber]>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      setServiceBeacon(
        _serviceBeacon: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<[boolean]>;
  
      symbol(overrides?: CallOverrides): Promise<[string]>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<[string]>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      treasury(overrides?: CallOverrides): Promise<[string]>;
  
      unpause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      updateProtocolFee(
        superToken: string,
        newProtocolFeePercent: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      updateTreasury(
        newTreasury: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      upgradeTo(
        newImplementation: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
  
      upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<ContractTransaction>;
    };
  
    SUPERFLUID_HOST(overrides?: CallOverrides): Promise<string>;
  
    acceptedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  
    addAcceptedSuperToken(
      superToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
    "createService(address[])"(
      _primaryTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "createService(address[],(address[],uint8,int96[]))"(
      _primaryTokens: string[],
      defaultPackage: PackageDataStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    createServiceWithSalt(
      _primaryTokens: string[],
      defaultPackage: PackageDataStruct,
      saltParams: SaltParamsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    deployer(overrides?: CallOverrides): Promise<string>;
  
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  
    initialize(
      _treasury: string,
      _deployer: string,
      _acceptedTokens: string[],
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    name(overrides?: CallOverrides): Promise<string>;
  
    owner(overrides?: CallOverrides): Promise<string>;
  
    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    paused(overrides?: CallOverrides): Promise<boolean>;
  
    protocolFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  
    removeAcceptedSuperToken(
      superToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    serviceBeacon(overrides?: CallOverrides): Promise<string>;
  
    serviceIdToAddress(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  
    serviceIds(overrides?: CallOverrides): Promise<BigNumber>;
  
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    setServiceBeacon(
      _serviceBeacon: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  
    symbol(overrides?: CallOverrides): Promise<string>;
  
    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    treasury(overrides?: CallOverrides): Promise<string>;
  
    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    updateProtocolFee(
      superToken: string,
      newProtocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    updateTreasury(
      newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  
    callStatic: {
      SUPERFLUID_HOST(overrides?: CallOverrides): Promise<string>;
  
      acceptedTokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  
      addAcceptedSuperToken(
        superToken: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      "createService(address[])"(
        _primaryTokens: string[],
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, string] & { _serviceId: BigNumber; _serviceAddress: string }
      >;
  
      "createService(address[],(address[],uint8,int96[]))"(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, string] & { _serviceId: BigNumber; _serviceAddress: string }
      >;
  
      createServiceWithSalt(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        saltParams: SaltParamsStruct,
        overrides?: CallOverrides
      ): Promise<
        [BigNumber, string] & { _serviceId: BigNumber; _serviceAddress: string }
      >;
  
      deployer(overrides?: CallOverrides): Promise<string>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<string>;
  
      initialize(
        _treasury: string,
        _deployer: string,
        _acceptedTokens: string[],
        _owner: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      name(overrides?: CallOverrides): Promise<string>;
  
      owner(overrides?: CallOverrides): Promise<string>;
  
      ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
      pause(overrides?: CallOverrides): Promise<void>;
  
      paused(overrides?: CallOverrides): Promise<boolean>;
  
      protocolFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      removeAcceptedSuperToken(
        superToken: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      renounceOwnership(overrides?: CallOverrides): Promise<void>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
  
      serviceBeacon(overrides?: CallOverrides): Promise<string>;
  
      serviceIdToAddress(
        arg0: BigNumberish,
        overrides?: CallOverrides
      ): Promise<string>;
  
      serviceIds(overrides?: CallOverrides): Promise<BigNumber>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: CallOverrides
      ): Promise<void>;
  
      setServiceBeacon(
        _serviceBeacon: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<boolean>;
  
      symbol(overrides?: CallOverrides): Promise<string>;
  
      tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      transferOwnership(
        newOwner: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      treasury(overrides?: CallOverrides): Promise<string>;
  
      unpause(overrides?: CallOverrides): Promise<void>;
  
      updateProtocolFee(
        superToken: string,
        newProtocolFeePercent: BigNumberish,
        overrides?: CallOverrides
      ): Promise<void>;
  
      updateTreasury(
        newTreasury: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      upgradeTo(
        newImplementation: string,
        overrides?: CallOverrides
      ): Promise<void>;
  
      upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: CallOverrides
      ): Promise<void>;
    };
  
    filters: {
      "AcceptedSuperTokenAdded(address)"(
        superToken?: string | null
      ): AcceptedSuperTokenAddedEventFilter;
      AcceptedSuperTokenAdded(
        superToken?: string | null
      ): AcceptedSuperTokenAddedEventFilter;
  
      "AcceptedSuperTokenRemoved(address)"(
        superToken?: string | null
      ): AcceptedSuperTokenRemovedEventFilter;
      AcceptedSuperTokenRemoved(
        superToken?: string | null
      ): AcceptedSuperTokenRemovedEventFilter;
  
      "AdminChanged(address,address)"(
        previousAdmin?: null,
        newAdmin?: null
      ): AdminChangedEventFilter;
      AdminChanged(
        previousAdmin?: null,
        newAdmin?: null
      ): AdminChangedEventFilter;
  
      "Approval(address,address,uint256)"(
        owner?: string | null,
        approved?: string | null,
        tokenId?: BigNumberish | null
      ): ApprovalEventFilter;
      Approval(
        owner?: string | null,
        approved?: string | null,
        tokenId?: BigNumberish | null
      ): ApprovalEventFilter;
  
      "ApprovalForAll(address,address,bool)"(
        owner?: string | null,
        operator?: string | null,
        approved?: null
      ): ApprovalForAllEventFilter;
      ApprovalForAll(
        owner?: string | null,
        operator?: string | null,
        approved?: null
      ): ApprovalForAllEventFilter;
  
      "BeaconUpgraded(address)"(
        beacon?: string | null
      ): BeaconUpgradedEventFilter;
      BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;
  
      "DiagonalServiceBeaconSet(address)"(
        diagonalServiceBeacon?: string | null
      ): DiagonalServiceBeaconSetEventFilter;
      DiagonalServiceBeaconSet(
        diagonalServiceBeacon?: string | null
      ): DiagonalServiceBeaconSetEventFilter;
  
      "OwnershipTransferred(address,address)"(
        previousOwner?: string | null,
        newOwner?: string | null
      ): OwnershipTransferredEventFilter;
      OwnershipTransferred(
        previousOwner?: string | null,
        newOwner?: string | null
      ): OwnershipTransferredEventFilter;
  
      "Paused(address)"(account?: null): PausedEventFilter;
      Paused(account?: null): PausedEventFilter;
  
      "ProtocolFeePercentUpdated(address,int96)"(
        superToken?: string | null,
        protocolFeePercent?: BigNumberish | null
      ): ProtocolFeePercentUpdatedEventFilter;
      ProtocolFeePercentUpdated(
        superToken?: string | null,
        protocolFeePercent?: BigNumberish | null
      ): ProtocolFeePercentUpdatedEventFilter;
  
      "ServiceCreated(uint256,address,address,uint256)"(
        serviceId?: BigNumberish | null,
        serviceAddress?: string | null,
        provider?: string | null,
        salt?: null
      ): ServiceCreatedEventFilter;
      ServiceCreated(
        serviceId?: BigNumberish | null,
        serviceAddress?: string | null,
        provider?: string | null,
        salt?: null
      ): ServiceCreatedEventFilter;
  
      "Transfer(address,address,uint256)"(
        from?: string | null,
        to?: string | null,
        tokenId?: BigNumberish | null
      ): TransferEventFilter;
      Transfer(
        from?: string | null,
        to?: string | null,
        tokenId?: BigNumberish | null
      ): TransferEventFilter;
  
      "TreasuryUpdated(address)"(
        newTreasury?: string | null
      ): TreasuryUpdatedEventFilter;
      TreasuryUpdated(newTreasury?: string | null): TreasuryUpdatedEventFilter;
  
      "Unpaused(address)"(account?: null): UnpausedEventFilter;
      Unpaused(account?: null): UnpausedEventFilter;
  
      "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
      Upgraded(implementation?: string | null): UpgradedEventFilter;
    };
  
    estimateGas: {
      SUPERFLUID_HOST(overrides?: CallOverrides): Promise<BigNumber>;
  
      acceptedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      addAcceptedSuperToken(
        superToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      "createService(address[])"(
        _primaryTokens: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "createService(address[],(address[],uint8,int96[]))"(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      createServiceWithSalt(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        saltParams: SaltParamsStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      deployer(overrides?: CallOverrides): Promise<BigNumber>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      initialize(
        _treasury: string,
        _deployer: string,
        _acceptedTokens: string[],
        _owner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      name(overrides?: CallOverrides): Promise<BigNumber>;
  
      owner(overrides?: CallOverrides): Promise<BigNumber>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      pause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      paused(overrides?: CallOverrides): Promise<BigNumber>;
  
      protocolFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  
      removeAcceptedSuperToken(
        superToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      serviceBeacon(overrides?: CallOverrides): Promise<BigNumber>;
  
      serviceIdToAddress(
        arg0: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      serviceIds(overrides?: CallOverrides): Promise<BigNumber>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      setServiceBeacon(
        _serviceBeacon: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      symbol(overrides?: CallOverrides): Promise<BigNumber>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<BigNumber>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      treasury(overrides?: CallOverrides): Promise<BigNumber>;
  
      unpause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      updateProtocolFee(
        superToken: string,
        newProtocolFeePercent: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      updateTreasury(
        newTreasury: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      upgradeTo(
        newImplementation: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
  
      upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<BigNumber>;
    };
  
    populateTransaction: {
      SUPERFLUID_HOST(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      acceptedTokens(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      addAcceptedSuperToken(
        superToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      approve(
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      balanceOf(
        owner: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      "createService(address[])"(
        _primaryTokens: string[],
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "createService(address[],(address[],uint8,int96[]))"(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      createServiceWithSalt(
        _primaryTokens: string[],
        defaultPackage: PackageDataStruct,
        saltParams: SaltParamsStruct,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      getApproved(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      initialize(
        _treasury: string,
        _deployer: string,
        _acceptedTokens: string[],
        _owner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      isApprovedForAll(
        owner: string,
        operator: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      name(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      ownerOf(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      pause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      protocolFees(
        arg0: string,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      removeAcceptedSuperToken(
        superToken: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      renounceOwnership(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "safeTransferFrom(address,address,uint256)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      "safeTransferFrom(address,address,uint256,bytes)"(
        from: string,
        to: string,
        tokenId: BigNumberish,
        _data: BytesLike,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      serviceBeacon(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      serviceIdToAddress(
        arg0: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      serviceIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      setApprovalForAll(
        operator: string,
        approved: boolean,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      setServiceBeacon(
        _serviceBeacon: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      supportsInterface(
        interfaceId: BytesLike,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      tokenURI(
        tokenId: BigNumberish,
        overrides?: CallOverrides
      ): Promise<PopulatedTransaction>;
  
      transferFrom(
        from: string,
        to: string,
        tokenId: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      transferOwnership(
        newOwner: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  
      unpause(
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      updateProtocolFee(
        superToken: string,
        newProtocolFeePercent: BigNumberish,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      updateTreasury(
        newTreasury: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      upgradeTo(
        newImplementation: string,
        overrides?: Overrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
  
      upgradeToAndCall(
        newImplementation: string,
        data: BytesLike,
        overrides?: PayableOverrides & { from?: string | Promise<string> }
      ): Promise<PopulatedTransaction>;
    };
  }
  